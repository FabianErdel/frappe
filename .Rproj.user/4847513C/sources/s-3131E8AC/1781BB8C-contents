## load library
library(hypergeo)

## hypergeometric series
hypergeo <- function(m, z, cutoff=400) {
  res <- genhypergeo(U=1+m/2, L=c(1+m,2+m/2), z=z)
  res[abs(z)>cutoff] <- 0 # avoid numerical problems for abs(z)>cutoff
  return(res)
}

## secant function used by "zeros"-function to find roots of
## a*J_{n-1}(a*r) + (h*r-n)*J_{n}(a*r)/r in interval (a0, a1)
secant <- function(r, h, a0, a1, n, prec, tol=1e-07, niter=5000) {
  lw <- a0
  up <- a1

  for (i in 1:niter) {
    y0 <- a0*besselJ(a0*r,n-1)+(h*r-n)*besselJ(a0*r,n)/r
    y1 <- a1*besselJ(a1*r,n-1)+(h*r-n)*besselJ(a1*r,n)/r

    a2 <- a1 - y1*(a1-a0)/(y1-y0)
    if(!is.finite(a2)) {return(0)}
    if(a2<prec) {a2 <- 0}

    if(!(a1==0 & a2==0) & !(a1>up & a2>up) & !(a1<lw & a2<lw) & a2*r <= 100000) {
      y2 <- a2*besselJ(a2*r,n-1)+(h*r-n)*besselJ(a2*r,n)/r
      if(abs(y2) < tol) {return(a2)}

      a0 <- a1
      a1 <- a2
    }
    else {return(0)}
  }
  return(0)
}

## function to find roots of
## J'_{n}(a*r) + h*J_{n}(a*r) = a/2*J_{n-1}(a*r) - a/2*J_{n+1}(a*r) + h*J_{n}(a*r)
## J'_{n}(a*r) + h*J_{n}(a*r) = a*J_{n-1}(a*r) + (h*r-n)*J_{n}(a*r)/r
## in interval (0,m)
zeros <- function(r, h, n, m, prec) {
  steps <- 10*ceiling(r)
  res <- rep(0, steps*m)
  for(i in 1:(steps*m)) {
    res[i] <- secant(r=r, h=h, a0=(i-1)/steps, a1=i/steps, n=n, prec=prec)
    if(res[i]<(i-1)/steps | res[i]>i/steps) {res[i] <- 0}
  }
  return(res[res>0])
}

## read tabulated data for faster calculation of FRAP functions
readTables <- function(path) {
  # process files with profile_half_no_boundary_coeff_rc
  files <- list.files(path, pattern="table_profile_half_no_boundary_coeff")

  cnt <- 0
  table_profile_half_no_boundary_coeff <- vector(mode = "list", length = length(files))
  toc_profile_half_no_boundary_coeff <- matrix(0, nrow=length(files), ncol=2)
  for(i in 1:length(files)) {
    cnt <- cnt+1
    rc <- gsub(".*_rc([^_rl]+).*", "\\1", files[i])
    rl <- gsub(".*_rl([^.rds]+).*", "\\1", files[i])
    toc_profile_half_no_boundary_coeff[cnt,1] <- as.numeric(rc)
    toc_profile_half_no_boundary_coeff[cnt,2] <- as.numeric(rl)
    table_profile_half_no_boundary_coeff[[cnt]] <- readRDS(table, file = paste0(path, .Platform$file.sep, files[i]))
  }
  assign("table_profile_half_no_boundary_coeff", table_profile_half_no_boundary_coeff, .GlobalEnv)
  assign("toc_profile_half_no_boundary_coeff", toc_profile_half_no_boundary_coeff, .GlobalEnv)
}
